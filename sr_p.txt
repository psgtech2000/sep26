# -*- coding: utf-8 -*-
"""
Created on Fri Sep 26 08:17:48 2025

@author: 91948
"""

#!/usr/bin/env python3
import socket
import ssl
import hashlib
import json

HOST = "127.0.0.1"
PORT = 65431

# TLS / SSL context for server
context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
context.load_cert_chain(certfile="server.crt", keyfile="server.key")
context.verify_mode = ssl.CERT_REQUIRED
context.load_verify_locations("ca.crt")

print("[*] Server: Loaded server certificate and CA for verification")

with socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0) as sock:
    sock.bind((HOST, PORT))
    sock.listen(5)
    print(f"[*] Server listening securely on {HOST}:{PORT}")

    with context.wrap_socket(sock, server_side=True) as ssock:
        conn, addr = ssock.accept()
        print(f"[+] Connection from {addr}")
        print("[Handshake] Server sent certificate to client")
        print("[Handshake] Server verified client certificate (via CA)")
        print("[Handshake] Mutual authentication successful â†’ Secure channel established\n")

        # ===== PASSWORD AUTHENTICATION =====
        stored_hash = hashlib.sha256(b"secret123").hexdigest()  # hashed password
        max_attempts = 3
        for attempt in range(max_attempts):
            conn.sendall(b"Enter password: ")
            data = conn.recv(1024)
            client_hash = data.decode()
            if client_hash == stored_hash:
                conn.sendall(b"Login successful!\n")
                print("[*] Client logged in successfully")
                break
            else:
                conn.sendall(b"Wrong password. Try again.\n")
        else:
            conn.sendall(b"Too many failed attempts. Connection closed.\n")
            conn.close()
            exit()

        # ===== MATRIX EXCHANGE EXAMPLE =====
        matrix = [[1,2,3],[4,5,6],[7,8,9]]
        conn.sendall(json.dumps(matrix).encode())  # send matrix encrypted

        # Receive value lookup from client
        data = conn.recv(1024)
        value = data.decode()
        print(f"[*] Client looked up value: {value}")

        # ===== CHAT LOOP (optional) =====
        while True:
            data = conn.recv(1024)
            if not data:
                break
            msg = data.decode().strip()
            if msg.lower() in ("exit", "quit"):
                print("[*] Client requested to end session.")
                conn.sendall(b"Goodbye!")
                break

            print(f"[Client]: {msg}")
            reply = input("[Server > ] ").strip()
            conn.sendall(reply.encode())
            if reply.lower() in ("exit", "quit"):
                print("[*] Server ending session.")
                break

        conn.close()
        print("[*] Connection closed.")
